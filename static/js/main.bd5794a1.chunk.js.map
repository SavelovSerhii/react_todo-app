{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosFilter/TodosFilter.tsx","App.tsx","index.tsx"],"names":["TodoItem","props","listTodo","completedTodos","setCompletedTodos","todos","setTodos","useState","editingId","setEditingId","initialTitle","setInitialTitle","handleChangeInput","todo","title","newTodo","map","oldTodo","id","className","classNames","completed","includes","editing","type","onChange","event","todoId","target","checked","filter","handleComplete","onDoubleClick","onClick","value","length","handleChange","onKeyDown","key","blur","handleKeyDown","onBlur","handleBlur","TodoList","visibleTodos","TodosFilter","activeFilter","selected","all","active","App","setVisibleTodos","newTodoTitle","setNewTodoTitle","setActiveFilter","useEffect","onSubmit","preventDefault","Math","random","handleSubmit","placeholder","htmlFor","handleToggleAll","filteredTodos","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd5794a1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  listTodo: Todo,\n  todos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  completedTodos: number[],\n  setCompletedTodos: React.Dispatch<React.SetStateAction<number[]>>,\n};\n\nexport const TodoItem: React.FC<Props> = (props) => {\n  const {\n    listTodo,\n    completedTodos,\n    setCompletedTodos,\n    todos,\n    setTodos,\n  } = props;\n  const [editingId, setEditingId] = useState<number>();\n  const [initialTitle, setInitialTitle] = useState<string[]>([]);\n\n  const handleComplete = (event: React.ChangeEvent<HTMLInputElement>, todoId: number) => {\n    if (event.target.checked) {\n      setCompletedTodos([...completedTodos, todoId]);\n    } else {\n      setCompletedTodos(completedTodos.filter(id => id !== todoId));\n    }\n  };\n\n  const handleChangeInput = (todo: Todo, title: string) => {\n    const newTodo = { ...todo, title };\n\n    setTodos([...todos.map((oldTodo) => {\n      if (oldTodo.id === newTodo.id) {\n        return newTodo;\n      }\n\n      return oldTodo;\n    })]);\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>, todo: Todo) => {\n    if (initialTitle.length === 0) {\n      setInitialTitle([todo.title]);\n    }\n\n    handleChangeInput(todo, event.target.value);\n  };\n\n  const handleDelete = (todoId: number) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n    setCompletedTodos(completedTodos.filter(id => id !== todoId));\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement, Element>) => {\n    setEditingId(0);\n    setInitialTitle([]);\n\n    if (event.target.value.length === 0) {\n      setTodos(todos.filter(oldTodo => oldTodo.title !== event.target.value));\n    }\n  };\n\n  const handleKeyDown = (event: any, todo: Todo) => {\n    if (event.key === 'Enter') {\n      event.target.blur();\n    }\n\n    if (event.key === 'Escape') {\n      handleChangeInput(todo, initialTitle[0]);\n      setInitialTitle([]);\n      event.target.blur();\n    }\n  };\n\n  return (\n    <li\n      className={classNames(\n        'main__item',\n        'todo',\n        { completed: completedTodos.includes(listTodo.id) },\n        { editing: editingId === listTodo.id },\n      )}\n      key={listTodo.id}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={`${listTodo.id}`}\n          onChange={(event) => handleComplete(event, listTodo.id)}\n        />\n        <span className=\"todo__text\" onDoubleClick={() => setEditingId(listTodo.id)}>{listTodo.title}</span>\n        <button type=\"button\" className=\"destroy\" onClick={() => handleDelete(listTodo.id)}>\n          <div className=\"destroy-icon\" />\n        </button>\n      </div>\n      <input\n        type=\"text\"\n        className=\"todoapp__input edit\"\n        value={listTodo.title}\n        onChange={(event) => handleChange(event, listTodo)}\n        onKeyDown={(event) => handleKeyDown(event, listTodo)}\n        onBlur={(event) => handleBlur(event)}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  visibleTodos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  completedTodos: number[],\n  setCompletedTodos: React.Dispatch<React.SetStateAction<number[]>>,\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const {\n    completedTodos,\n    setCompletedTodos,\n    todos,\n    visibleTodos,\n    setTodos,\n  } = props;\n\n  return (\n    <ul className=\"main__list\">\n      {visibleTodos.map(todo => (\n        <TodoItem\n          listTodo={todo}\n          todos={todos}\n          setTodos={setTodos}\n          completedTodos={completedTodos}\n          setCompletedTodos={setCompletedTodos}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  activeFilter: string,\n  filter: {\n    all: () => void;\n    active: () => void;\n    completed: () => void;\n  }\n};\n\nexport const TodosFilter: React.FC<Props> = (props) => {\n  const { activeFilter, filter } = props;\n\n  return (\n    <ul className=\"filters\">\n      <li key=\"all\">\n        <button type=\"button\" className={classNames('', { selected: activeFilter === 'all' })} onClick={() => filter.all()}>All</button>\n      </li>\n\n      <li key=\"active\">\n        <button\n          type=\"button\"\n          className={classNames('', { selected: activeFilter === 'active' })}\n          onClick={() => filter.active()}\n        >\n          Active\n        </button>\n      </li>\n\n      <li key=\"completed\">\n        <button\n          type=\"button\"\n          className={classNames('', { selected: activeFilter === 'completed' })}\n          onClick={() => filter.completed()}\n        >\n          Completed\n        </button>\n      </li>\n    </ul>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodosFilter } from './components/TodosFilter/TodosFilter';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>(todos);\n  const [completedTodos, setCompletedTodos] = useState<number[]>([]);\n  const [newTodoTitle, setNewTodoTitle] = useState<string>('');\n  const [activeFilter, setActiveFilter] = useState('all');\n  const filter = {\n    all: () => {\n      setVisibleTodos(todos);\n      setActiveFilter('all');\n    },\n    active: () => {\n      setVisibleTodos(todos.filter(todo => !completedTodos.includes(todo.id)));\n      setActiveFilter('active');\n    },\n    completed: () => {\n      setVisibleTodos(todos.filter(todo => completedTodos.includes(todo.id)));\n      setActiveFilter('completed');\n    },\n  };\n\n  const handleToggleAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      setCompletedTodos(todos.map(todo => todo.id));\n    }\n\n    if (!event.target.checked) {\n      setCompletedTodos([]);\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const newTodo = {\n      id: Math.random(),\n      title: newTodoTitle,\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n    setNewTodoTitle('');\n  };\n\n  const handleClearAll = () => {\n    const filteredTodos = todos.filter(todo => !completedTodos.includes(todo.id));\n\n    setTodos(filteredTodos);\n    setCompletedTodos(completedTodos.filter(id => filteredTodos.some(todo => todo.id === id)));\n  };\n\n  useEffect(() => {\n    if (activeFilter === 'all') {\n      filter.all();\n    } else if (activeFilter === 'active') {\n      filter.active();\n    } else {\n      filter.completed();\n    }\n  }, [todos]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1 className=\"todoapp__title\">todos</h1>\n\n        <form onSubmit={(event) => handleSubmit(event)}>\n          <input\n            type=\"text\"\n            className=\"todoapp__input new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodoTitle}\n            onChange={(event) => setNewTodoTitle(event.target.value)}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <label htmlFor=\"toggle-all\" className=\"main__toggle-label\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"main__toggle-check\"\n            onChange={(event) => handleToggleAll(event)}\n          />\n          <div className={classNames(\n            'main__toggle-button',\n            { checked: todos.length === completedTodos.length },\n          )}\n          />\n        </label>\n\n        <TodoList\n          todos={todos}\n          visibleTodos={visibleTodos}\n          setTodos={setTodos}\n          completedTodos={completedTodos}\n          setCompletedTodos={setCompletedTodos}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${todos.length - completedTodos.length} items left`}\n        </span>\n\n        <TodosFilter filter={filter} activeFilter={activeFilter} />\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={handleClearAll}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './styles/index.scss';\nimport './styles/todo-list.scss';\nimport './styles/filters.scss';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}