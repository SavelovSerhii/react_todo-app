{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosFilter/TodosFilter.tsx","App.tsx","index.tsx"],"names":["SET_TODOS","SET_VISIBLE_TODOS","SET_COMPLETED_TODOS","SET_NEW_TODO","SET_ACTIVE_FILTER","SET_EDITING_ID","SET_INITIAL_TITLE","setTodosAction","payload","type","setVisibleTodosAction","setCompletedTodosAction","setNewTodoAction","setActiveFilterAction","setEditingIdAction","setInitialTitleAction","initialState","todos","visibleTodos","completedTodos","newTodo","activeFilter","editingId","initialTitle","store","createStore","state","action","getTodosSelector","getVisibleTodosSelector","getCompletedTodosSelector","getNewTodoSelector","getActiveFilterSelector","getEditingIdSelector","getInitialTitleSelector","TodoItem","props","listTodo","dispatch","useDispatch","useSelector","handleChangeInput","todo","title","map","oldTodo","id","className","classNames","completed","includes","editing","onChange","event","todoId","target","checked","filter","handleComplete","onDoubleClick","onClick","value","length","handleChange","onKeyDown","key","blur","handleKeyDown","onBlur","handleBlur","TodoList","TodosFilter","selected","all","active","App","newTodoTitle","useEffect","onSubmit","preventDefault","Math","random","handleSubmit","placeholder","htmlFor","handleToggleAll","filteredTodos","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5987442b.chunk.js","sourcesContent":["export const SET_TODOS = 'SET_TODOS';\nexport const SET_VISIBLE_TODOS = 'SET_VISIBLE_TODOS';\nexport const SET_COMPLETED_TODOS = 'SET_COMPLETED_TODOS';\nexport const SET_NEW_TODO = 'SET_NEW_TODO';\nexport const SET_ACTIVE_FILTER = 'SET_ACTIVE_FILTER';\nexport const SET_EDITING_ID = 'SET_EDITING_ID';\nexport const SET_INITIAL_TITLE = 'SET_INITIAL_TITLE';\n\nexport const setTodosAction = (payload: Todo[]) => ({\n  type: SET_TODOS,\n  payload,\n});\n\nexport const setVisibleTodosAction = (payload: Todo[]) => ({\n  type: SET_VISIBLE_TODOS,\n  payload,\n});\n\nexport const setCompletedTodosAction = (payload: number[]) => ({\n  type: SET_COMPLETED_TODOS,\n  payload,\n});\n\nexport const setNewTodoAction = (payload: string) => ({\n  type: SET_NEW_TODO,\n  payload,\n});\n\nexport const setActiveFilterAction = (payload: string) => ({\n  type: SET_ACTIVE_FILTER,\n  payload,\n});\n\nexport const setEditingIdAction = (payload: number) => ({\n  type: SET_EDITING_ID,\n  payload,\n});\n\nexport const setInitialTitleAction = (payload: string[]) => ({\n  type: SET_INITIAL_TITLE,\n  payload,\n});\n","import { createStore } from 'redux';\nimport {\n  SET_ACTIVE_FILTER,\n  SET_COMPLETED_TODOS,\n  SET_EDITING_ID,\n  SET_INITIAL_TITLE,\n  SET_NEW_TODO,\n  SET_TODOS,\n  SET_VISIBLE_TODOS,\n} from './actions';\n\nconst initialState: State = {\n  todos: [],\n  visibleTodos: [],\n  completedTodos: [],\n  newTodo: '',\n  activeFilter: 'all',\n  editingId: 0,\n  initialTitle: [],\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case SET_VISIBLE_TODOS:\n      return {\n        ...state,\n        visibleTodos: [...action.payload],\n      };\n\n    case SET_COMPLETED_TODOS:\n      return {\n        ...state,\n        completedTodos: [...action.payload],\n      };\n\n    case SET_NEW_TODO:\n      return {\n        ...state,\n        newTodo: action.payload,\n      };\n\n    case SET_ACTIVE_FILTER:\n      return {\n        ...state,\n        activeFilter: action.payload,\n      };\n\n    case SET_EDITING_ID:\n      return {\n        ...state,\n        editingId: action.payload,\n      };\n\n    case SET_INITIAL_TITLE:\n      return {\n        ...state,\n        initialTitle: [...action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","export const getTodosSelector = (state: State) => state.todos;\nexport const getVisibleTodosSelector = (state: State) => state.visibleTodos;\nexport const getCompletedTodosSelector = (state: State) => state.completedTodos;\nexport const getNewTodoSelector = (state: State) => state.newTodo;\nexport const getActiveFilterSelector = (state: State) => state.activeFilter;\nexport const getEditingIdSelector = (state: State) => state.editingId;\nexport const getInitialTitleSelector = (state: State) => state.initialTitle;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setCompletedTodosAction,\n  setEditingIdAction,\n  setInitialTitleAction,\n  setTodosAction,\n} from '../../store/actions';\nimport { getEditingIdSelector, getInitialTitleSelector } from '../../store/selectors';\n\ntype Props = {\n  listTodo: Todo,\n  todos: Todo[],\n  completedTodos: number[],\n};\n\nexport const TodoItem: React.FC<Props> = (props) => {\n  const {\n    listTodo,\n    completedTodos,\n    todos,\n  } = props;\n  const dispatch = useDispatch();\n  const editingId = useSelector(getEditingIdSelector);\n  const initialTitle = useSelector(getInitialTitleSelector);\n\n  const handleComplete = (event: React.ChangeEvent<HTMLInputElement>, todoId: number) => {\n    if (event.target.checked) {\n      dispatch(setCompletedTodosAction([...completedTodos, todoId]));\n    } else {\n      dispatch(setCompletedTodosAction(completedTodos.filter(id => id !== todoId)));\n    }\n  };\n\n  const handleChangeInput = (todo: Todo, title: string) => {\n    const newTodo = { ...todo, title };\n\n    dispatch(setTodosAction([...todos.map((oldTodo) => {\n      if (oldTodo.id === newTodo.id) {\n        return newTodo;\n      }\n\n      return oldTodo;\n    })]));\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>, todo: Todo) => {\n    if (initialTitle.length === 0) {\n      dispatch(setInitialTitleAction([todo.title]));\n    }\n\n    handleChangeInput(todo, event.target.value);\n  };\n\n  const handleDelete = (todoId: number) => {\n    dispatch(setTodosAction(todos.filter(todo => todo.id !== todoId)));\n    dispatch(setCompletedTodosAction(completedTodos.filter(id => id !== todoId)));\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement, Element>) => {\n    dispatch(setEditingIdAction(0));\n    dispatch(setInitialTitleAction([]));\n\n    if (event.target.value.length === 0) {\n      dispatch(setTodosAction(todos.filter(oldTodo => oldTodo.title !== event.target.value)));\n    }\n  };\n\n  const handleKeyDown = (event: any, todo: Todo) => {\n    if (event.key === 'Enter') {\n      event.target.blur();\n    }\n\n    if (event.key === 'Escape') {\n      handleChangeInput(todo, initialTitle[0]);\n      dispatch(setInitialTitleAction([]));\n      event.target.blur();\n    }\n  };\n\n  return (\n    <li\n      className={classNames(\n        'main__item',\n        'todo',\n        { completed: completedTodos.includes(listTodo.id) },\n        { editing: editingId === listTodo.id },\n      )}\n      key={listTodo.id}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={`${listTodo.id}`}\n          onChange={(event) => handleComplete(event, listTodo.id)}\n        />\n        <span className=\"todo__text\" onDoubleClick={() => dispatch(setEditingIdAction(listTodo.id))}>{listTodo.title}</span>\n        <button type=\"button\" className=\"destroy\" onClick={() => handleDelete(listTodo.id)}>\n          <div className=\"destroy-icon\" />\n        </button>\n      </div>\n      <input\n        type=\"text\"\n        className=\"todoapp__input edit\"\n        value={listTodo.title}\n        onChange={(event) => handleChange(event, listTodo)}\n        onKeyDown={(event) => handleKeyDown(event, listTodo)}\n        onBlur={(event) => handleBlur(event)}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  visibleTodos: Todo[],\n  completedTodos: number[],\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const {\n    completedTodos,\n    todos,\n    visibleTodos,\n  } = props;\n\n  return (\n    <ul className=\"main__list\">\n      {visibleTodos.map(todo => (\n        <TodoItem\n          listTodo={todo}\n          todos={todos}\n          completedTodos={completedTodos}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  activeFilter: string,\n  filter: {\n    all: () => void;\n    active: () => void;\n    completed: () => void;\n  }\n};\n\nexport const TodosFilter: React.FC<Props> = (props) => {\n  const { activeFilter, filter } = props;\n\n  return (\n    <ul className=\"filters\">\n      <li key=\"all\">\n        <button type=\"button\" className={classNames('', { selected: activeFilter === 'all' })} onClick={() => filter.all()}>All</button>\n      </li>\n\n      <li key=\"active\">\n        <button\n          type=\"button\"\n          className={classNames('', { selected: activeFilter === 'active' })}\n          onClick={() => filter.active()}\n        >\n          Active\n        </button>\n      </li>\n\n      <li key=\"completed\">\n        <button\n          type=\"button\"\n          className={classNames('', { selected: activeFilter === 'completed' })}\n          onClick={() => filter.completed()}\n        >\n          Completed\n        </button>\n      </li>\n    </ul>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodosFilter } from './components/TodosFilter/TodosFilter';\nimport {\n  setActiveFilterAction,\n  setCompletedTodosAction,\n  setNewTodoAction,\n  setTodosAction,\n  setVisibleTodosAction,\n} from './store/actions';\nimport {\n  getActiveFilterSelector,\n  getCompletedTodosSelector,\n  getNewTodoSelector,\n  getTodosSelector,\n  getVisibleTodosSelector,\n} from './store/selectors';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodosSelector);\n  const visibleTodos = useSelector(getVisibleTodosSelector);\n  const completedTodos = useSelector(getCompletedTodosSelector);\n  const newTodoTitle = useSelector(getNewTodoSelector);\n  const activeFilter = useSelector(getActiveFilterSelector);\n\n  const filter = {\n    all: () => {\n      dispatch(setVisibleTodosAction(todos));\n      dispatch(setActiveFilterAction('all'));\n    },\n    active: () => {\n      dispatch(setVisibleTodosAction(todos.filter(todo => !completedTodos.includes(todo.id))));\n      dispatch(setActiveFilterAction('active'));\n    },\n    completed: () => {\n      dispatch(setVisibleTodosAction(todos.filter(todo => completedTodos.includes(todo.id))));\n      dispatch(setActiveFilterAction('completed'));\n    },\n  };\n\n  const handleToggleAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      dispatch(setCompletedTodosAction(todos.map(todo => todo.id)));\n    }\n\n    if (!event.target.checked) {\n      dispatch(setCompletedTodosAction([]));\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const newTodo = {\n      id: Math.random(),\n      title: newTodoTitle,\n      completed: false,\n    };\n\n    dispatch(setTodosAction([...todos, newTodo]));\n    dispatch(setNewTodoAction(''));\n  };\n\n  const handleClearAll = () => {\n    const filteredTodos = todos.filter(todo => !completedTodos.includes(todo.id));\n\n    dispatch(setTodosAction(filteredTodos));\n    dispatch(setCompletedTodosAction(completedTodos\n      .filter(id => filteredTodos.some(todo => todo.id === id))));\n  };\n\n  useEffect(() => {\n    if (activeFilter === 'all') {\n      filter.all();\n    } else if (activeFilter === 'active') {\n      filter.active();\n    } else {\n      filter.completed();\n    }\n  }, [todos]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1 className=\"todoapp__title\">todos</h1>\n\n        <form onSubmit={(event) => handleSubmit(event)}>\n          <input\n            type=\"text\"\n            className=\"todoapp__input new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodoTitle}\n            onChange={(event) => dispatch(setNewTodoAction(event.target.value))}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <label htmlFor=\"toggle-all\" className=\"main__toggle-label\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"main__toggle-check\"\n            onChange={(event) => handleToggleAll(event)}\n          />\n          <div className={classNames(\n            'main__toggle-button',\n            { checked: todos.length === completedTodos.length },\n          )}\n          />\n        </label>\n\n        <TodoList\n          todos={todos}\n          visibleTodos={visibleTodos}\n          completedTodos={completedTodos}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${todos.length - completedTodos.length} items left`}\n        </span>\n\n        <TodosFilter filter={filter} activeFilter={activeFilter} />\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={handleClearAll}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './styles/index.scss';\nimport './styles/todo-list.scss';\nimport './styles/filters.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}